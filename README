
################################ Text Analyzer – Long Documents & People Connections  ################################

This project is a **text analysis tool** that processes long documents to uncover how people are mentioned, in what contexts, and how they are connected.  

It was developed as part of an academic project and demonstrates skills in:  
- **Text preprocessing** (tokenization, stopword removal, normalization)  
- **Word sequence (n-gram) analysis**  
- **Entity recognition & mention counting**  
- **Graph-based analysis of relationships**  
- **Search engine–like functionality**  

Imagine having thousands of pages of diaries, interview transcripts, or historical reports.
This tool helps you **see patterns, counts, and connections between individuals** quickly.  

---

## Features:  

1. **Initial Text Preprocessing**  
   - Converts text to lowercase, removes punctuation and stopwords, and normalizes whitespace.  
   - Cleans and prepares both sentence data and people’s names (including nicknames).  

2. **Counting Word Sequences (K-seqs)**  
   - Counts all n-grams up to a specified length `N`.  
   - Example: 1-seq (words), 2-seq (pairs), 3-seq (triplets).  

3. **Counting Person Mentions**  
   - Tracks how often each person appears (main name + alternate nicknames).  

4. **Basic Search Engine Functionality**  
   - Finds sentences containing specific k-sequences.  
   - Search runs in **O(1)** time using dictionary-based structures.  

5. **Contexts of People & K-seqs**  
   - Identifies the word sequences that appear in the same sentences as each person.  

6. **Direct Connections Between People**  
   - Builds a graph where nodes are people and edges are co-occurrence within sliding sentence windows.  

7. **Indirect Connections**  
   - Determines whether people are connected via intermediate nodes (friends-of-friends).  

8. **Fixed-Length Path Analysis (Extension)**  
   - Checks whether two people are connected by a path of exactly `K` steps.  

9. **Sentence Grouping by Shared Words (Extension)**  
   - Groups sentences into clusters based on overlapping words.  

---

## Tech Stack: 

- ** Language: ** Python 3  
- ** Core Libraries: ** `argparse`, `json`, `csv`  
- ** Not Allowed (challenge rule): ** No use of advanced graph libraries like `networkx` or `scikit-learn` — all graph and search algorithms are implemented from scratch.  

---

## Project Structure:

text_analyzer/
│── main.py                # Entry point for running tasks
│── Data - example/        # Data format examples
│── Utilities/             # Helper and test functions for preprocessing & analysis
│── Examples/              # Sample input/output files for each task
│── Task_Implementation/   # Implementation of 9 text processors task
│── README.md              # Project documentation

---

## Usage:  

Run the program with command-line arguments.  
**Example – Task 6 (Finding Direct Connections):**  
```bash
python3 main.py -t 6 -s data/sentences.csv -p data/people.csv -r data/remove.csv --windowsize 4 --threshold 2

Output is always printed in JSON format, sorted for readability.